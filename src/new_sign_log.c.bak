#include "new_sign.h"
#include "yyjson.h"
#include <string.h>
#include "ngx_detect_log_module.h"
#include "../ngx_http_gen_protovar_module/ngx_protovar_pub.h"

/***************     告警格式    ****************
{
    "threat_id":10001,                          告警规则ID
    "vars":[
        {                   
            "var_type":16,                      
            "var_name":"login",
            "var_value":"zhangbin",
            "high_begin":5,
            "high_end":8
        },
        {
            "var_type":31,
            "var_name":"",
            "var_value":"www.baidu.com",
            "high_begin":4,
            "high_end":6
        }
    ]
}
******************************************************/

int log_2_content(ngx_http_request_t *r, uint32_t threat_id, rule_log_unit_t *log_unit, ngx_array_t *log_array, char *dst)
{
    yyjson_mut_doc *mut_doc = NULL;
    mut_doc = yyjson_mut_doc_new(NULL);

    if (mut_doc == NULL)
    {
    //    printf("malloc json doc failed");
        return -1;
    }

    yyjson_mut_val *root = yyjson_mut_obj(mut_doc);
    if(root == NULL)
    {
    //   printf("malloc root failed");
        yyjson_mut_doc_free(mut_doc);
        return -2;
    }

    yyjson_mut_val *key = yyjson_mut_str(mut_doc, "threat_id");
    yyjson_mut_val *value = yyjson_mut_int(mut_doc, threat_id);
    yyjson_mut_obj_add(root, key, value);

    yyjson_mut_val *signature_arr = yyjson_mut_arr(mut_doc);
    if(signature_arr == NULL)
    {
        printf("malloc signature_arr failed");
        yyjson_mut_doc_free(mut_doc);
        return -1;
    }

     yyjson_mut_val *signature_val;

    if (log_unit) {
        signature_val = yyjson_mut_obj(mut_doc);
        if(signature_val == NULL)
        {
            printf("malloc signature_val failed");
            yyjson_mut_doc_free(mut_doc);
            return -3;
        }

        key = yyjson_mut_str(mut_doc, "var_type");
        value = yyjson_mut_int(mut_doc, log_unit->proto_var_id);
        yyjson_mut_obj_add(signature_val, key, value);

        key = yyjson_mut_str(mut_doc, "var_name");
        value = yyjson_mut_strn(mut_doc, "", 0);
        yyjson_mut_obj_add(signature_val, key, value);

        vs_proto_var_t *v = get_protovar(r, log_unit->proto_var_id);

        if (v->store_type == VS_VST_UINT32) {
            key = yyjson_mut_str(mut_doc, "var_value");
            u_char log_value[32] = {"\0"};
            if (log_unit->proto_var_id == NGX_VAR_SIPV4 || log_unit->proto_var_id == NGX_VAR_DIPV4) {
                unsigned int nip = htonl(v->un.i);  
                ngx_inet_ntop(AF_INET, &nip, log_value, NGX_INET_ADDRSTRLEN);
            } else {
                ngx_snprintf(log_value, 10, "%ui", v->un.i);
            }
            value = yyjson_mut_strn(mut_doc, (const char *)log_value, strlen((const char *)log_value));
            yyjson_mut_obj_add(signature_val, key, value);

            key = yyjson_mut_str(mut_doc, "high_begin");
            value = yyjson_mut_int(mut_doc, 0);
            yyjson_mut_obj_add(signature_val, key, value);

            key = yyjson_mut_str(mut_doc, "high_end");
            value = yyjson_mut_int(mut_doc, strlen((const char *)log_value));
            yyjson_mut_obj_add(signature_val, key, value);

        } else if (v->store_type == VS_VST_POINTER) {
            key = yyjson_mut_str(mut_doc, "var_value");
            value = yyjson_mut_strn(mut_doc, v->un.p, v->len);
            yyjson_mut_obj_add(signature_val, key, value);

            key = yyjson_mut_str(mut_doc, "high_begin");
            value = yyjson_mut_int(mut_doc, log_unit->begin);
            yyjson_mut_obj_add(signature_val, key, value);

            key = yyjson_mut_str(mut_doc, "high_end");
            value = yyjson_mut_int(mut_doc, log_unit->end);
            yyjson_mut_obj_add(signature_val, key, value);
        }

        yyjson_mut_arr_append(signature_arr, signature_val);

    } else {

        for (ngx_uint_t i = 0; i < log_array->nelts; i++) {
            rule_log_unit_t *log_unit = *((rule_log_unit_t **)log_array->elts + i);
            if (log_unit) {

                signature_val = yyjson_mut_obj(mut_doc);
                if(signature_val == NULL)
                {
                    printf("malloc signature_val failed");
                    yyjson_mut_doc_free(mut_doc);
                    return -3;
                }
                key = yyjson_mut_str(mut_doc, "var_type");
                value = yyjson_mut_int(mut_doc, log_unit->proto_var_id);
                yyjson_mut_obj_add(signature_val, key, value);

                key = yyjson_mut_str(mut_doc, "var_name");
                value = yyjson_mut_strn(mut_doc, "", 0);
                yyjson_mut_obj_add(signature_val, key, value);

                vs_proto_var_t *v = get_protovar(r, log_unit->proto_var_id);

                if (v->store_type == VS_VST_UINT32) {
                    key = yyjson_mut_str(mut_doc, "var_value");
                    u_char log_value[32] = {"\0"};
                    if (log_unit->proto_var_id == NGX_VAR_SIPV4 || log_unit->proto_var_id == NGX_VAR_DIPV4) {
                        unsigned int nip = htonl(v->un.i);  
                        ngx_inet_ntop(AF_INET, &nip, log_value, NGX_INET_ADDRSTRLEN);
                    } else {
                        ngx_snprintf(log_value, 10, "%ui", v->un.i);
                    }
                    value = yyjson_mut_strn(mut_doc, (const char *)log_value, strlen((const char *)log_value));
                    yyjson_mut_obj_add(signature_val, key, value);

                    key = yyjson_mut_str(mut_doc, "high_begin");
                    value = yyjson_mut_int(mut_doc, 0);
                    yyjson_mut_obj_add(signature_val, key, value);

                    key = yyjson_mut_str(mut_doc, "high_end");
                    value = yyjson_mut_int(mut_doc, strlen((const char *)log_value));
                    yyjson_mut_obj_add(signature_val, key, value);

                } else if (v->store_type == VS_VST_POINTER) {
                    key = yyjson_mut_str(mut_doc, "var_value");
                    value = yyjson_mut_strn(mut_doc, v->un.p, v->len);
                    yyjson_mut_obj_add(signature_val, key, value);

                    key = yyjson_mut_str(mut_doc, "high_begin");
                    value = yyjson_mut_int(mut_doc, log_unit->begin);
                    yyjson_mut_obj_add(signature_val, key, value);

                    key = yyjson_mut_str(mut_doc, "high_end");
                    value = yyjson_mut_int(mut_doc, log_unit->end);
                    yyjson_mut_obj_add(signature_val, key, value);
                }

                yyjson_mut_arr_append(signature_arr, signature_val);
            }
        }
    }

    key = yyjson_mut_str(mut_doc, "vars");
    value = signature_arr;
    yyjson_mut_obj_add(root, key, value);

    yyjson_mut_doc_set_root(mut_doc, root);

    size_t len = 0;
    char *content_json = yyjson_mut_write(mut_doc, YYJSON_WRITE_NOFLAG, &len);
    
    memcpy(dst, content_json, MIN(len, MAX_CONTENT_LEN));

    yyjson_mut_doc_free(mut_doc);

    return 0;
}

